from gcdyn.fitness import Fitness
from gcdyn.replay import ReplayPhenotype
import pytest


@pytest.fixture
def seq_list():
    seqs = [
        "GAGGTGCAGCTTCAGGAGTCAGGACCTAACCTCGTGAAACCTTCTCAGACTCTGTCCCTCACCTGTTCTGTCACAGGCGACTCCATCACCAGTGGTTACTGGAACTGGATCCGGAAATTCCCAGGGAATAAACTTGAGTACATGGGGTACATAAGCTACAGTGGTAGCACTTACTACAATCCATCTCTCAAAAGTCGAATCTCCATCACTCGAGACACATCCAAGAATCAGTACTACCTGAAGTTGAATTCTGTGACTACTGAGGACACAGCCTCATACTACTGTGGAAGGGACTTCGATGTCTGGGGCGCAGGGACCACGGTCATCGTCTCCTCAGACATTGTGATGACTCAGTCTCAAAAATTCATGTCCACATCAGTAGGAGACAGGGTCAGCGTCACCTGCAAGGCCAGTCAGAATGTGGGTACTAATGTAGCCTGGTATCAACAGAAACCAGGGCAATCTCCTAAAGCACTGATTTACTCGGCATCCTACAGGTACAGTGGAGTCCCTGATCGCTTCACAGGCAGTGGATCTGGGACAGATTTCACTCTCACCATCAGCAATGTGCAGTCTGAAGACTTGGCAGAGTATTTCTGTCACCAATATAGCAGCTATCCTCTCACGTTCGGCTCGGGGACTAAGCTAGAAATAAAA",
        "GAGGTGCAGCTTCAGGAGTCAGGACCTAGCCTCGTGAAACCTTCTCAGACTCTGTCCCTCACCTGTTCTGTCACTGGCGACTCCATCACCAGTGGTTACTGGAACTGGATCCGGAAATTCCCAGGGAATAAACTTGAGTACATGGGGTACATAAGCTACAGTGGTCGCACTTACTACAATCCATCTCTCATAAGTCGAATCTCCATCACTCGAGACACATCCAAGAACCAGTACTACCTGCAGTTGAATTCTGTGACTACTGAGGACACAGCCACATATTACTGTGGAAGGGACTTCGATGTCTGGGGCGCAGGGACCACGGTCACCGTCTCCTCAGACATTGTGATGACTCAGTCTCAAAAATTCATGTCCACATCAGTAGGAGACAGGGTCAGCGTCACCTGCAAGGCCAGTCAGAATGTGGGTACTAATGTAGCCTGGTATCAACAGAAACCAGGGCAATCTCCTAAAGCACTGATTTACTCGGCATCCTACAGGTACAGTGGAGTCCCTGATCGCTTCACAGGCAGTGGATCTGGGACAGATTTCACTCTCACCATCAGCAATGTGCAGTCTGAAGACTTGGCAGAGTATTTCTGTCAGCAATATAACAGCTATCCTCTCACGTTCGGCTCGGGGACTAAGCTAGAAATAAAA",
        "GAGGTGCAGCTTCAGGAGTCAGGACCTAGCCTCGTGAAACCTTCTCAGACTCTGTCCCTCACCTGTTCTGTCACTGGCGACTCCATCACCAGTGGTTACTGGAACTGGATCCGGAAATTCCCAGGGAATAAACTTGAGTACATGGGGTACATAAGCTACAGTGGTAACACTTACTACAATCCATCTCTCAAAAGTCGAATCTCCATCACTCGAGACACATCCAAGAACCAGTACTACCTGCAGTTGAATTCTGTGACTACTGAGGACACAGCCACATATTACTGTGCAAGGGACTTCGATGTCTGGGGCGCAGGGACCACGGTCACCGTCTCCTCAGACATTGTGATGACTCAGTCTCAAAAATTCATGTCCACATCAGTAGGAGACAGGGTCAGCGTCACCTGCAAGGCCAGTCAGAATGTGGGTACTAATGTAGCCTGGTATCAACAGAAACCAGGACAATCTCCTAGATCACTGATTTACTCGGCATCCTACAGGTACAGTGGAGTCCCTGATCGCTTCACAGGCAGTGGATCTGGGACAGATTTCACTCTCACCATCAGCAATGTGCAGTCTGAAGACTTGGCCGAGTATTTCTGTCATCAATATAGCAGCTATCCTCTCACGTTCGGCTCGGGGACTAAGCTAGAAATAAAA",
    ]

    return seqs


@pytest.fixture
def fasta_seq_path():
    # TODO: set better path for test files
    path = "notebooks/sample.fasta"
    return path


@pytest.fixture
def replay_phenotype():
    replay_phenotype = ReplayPhenotype(
        1,
        1,
        336,
        "https://raw.githubusercontent.com/jbloomlab/Ab-CGGnaive_DMS/main/data/CGGnaive_sites.csv",
        "notebooks/Linear.model",
        ["delta_log10_KD", "expression"],
        -10.43,
    )
    return replay_phenotype


def test_fitness(seq_list, replay_phenotype):
    fit = Fitness("linear")
    linear_fitness_df = fit.fitness_df(
        seq_list=seq_list, KD_calculator=replay_phenotype.return_KD
    )
    assert all(fitness > 0 for fitness in linear_fitness_df["fitness"])


def test_fitness_fasta(fasta_seq_path, replay_phenotype):
    fit = Fitness("linear")
    linear_fitness_df = fit.fitness_df(
        fasta_path=fasta_seq_path, KD_calculator=replay_phenotype.return_KD
    )
    assert all(fitness > 0 for fitness in linear_fitness_df["fitness"])


def test_normalized_fitness(seq_list, replay_phenotype):
    fit = Fitness("sigmoid")
    sig_fitness_vals = fit.fitness_df(
        seq_list=seq_list, KD_calculator=replay_phenotype.return_KD
    )
    normalized_fitness_vals = fit.normalize_fitness(sig_fitness_vals)
    assert all(fitness < 1 and fitness > 0 for fitness in normalized_fitness_vals)

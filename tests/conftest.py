import pytest
from Bio import SeqIO

from experiments import replay


@pytest.fixture
def seq_list():
    seqs = [
        "GAGGTGCAGCTTCAGGAGTCAGGACCTAACCTCGTGAAACCTTCTCAGACTCTGTCCCTCACCTGTTCTGTCACAGGCGACTCCATCACCAGTGGTTACTGGAACTGGATCCGGAAATTCCCAGGGAATAAACTTGAGTACATGGGGTACATAAGCTACAGTGGTAGCACTTACTACAATCCATCTCTCAAAAGTCGAATCTCCATCACTCGAGACACATCCAAGAATCAGTACTACCTGAAGTTGAATTCTGTGACTACTGAGGACACAGCCTCATACTACTGTGGAAGGGACTTCGATGTCTGGGGCGCAGGGACCACGGTCATCGTCTCCTCAGACATTGTGATGACTCAGTCTCAAAAATTCATGTCCACATCAGTAGGAGACAGGGTCAGCGTCACCTGCAAGGCCAGTCAGAATGTGGGTACTAATGTAGCCTGGTATCAACAGAAACCAGGGCAATCTCCTAAAGCACTGATTTACTCGGCATCCTACAGGTACAGTGGAGTCCCTGATCGCTTCACAGGCAGTGGATCTGGGACAGATTTCACTCTCACCATCAGCAATGTGCAGTCTGAAGACTTGGCAGAGTATTTCTGTCACCAATATAGCAGCTATCCTCTCACGTTCGGCTCGGGGACTAAGCTAGAAATAAAA",
        "GAGGTGCAGCTTCAGGAGTCAGGACCTAGCCTCGTGAAACCTTCTCAGACTCTGTCCCTCACCTGTTCTGTCACTGGCGACTCCATCACCAGTGGTTACTGGAACTGGATCCGGAAATTCCCAGGGAATAAACTTGAGTACATGGGGTACATAAGCTACAGTGGTCGCACTTACTACAATCCATCTCTCATAAGTCGAATCTCCATCACTCGAGACACATCCAAGAACCAGTACTACCTGCAGTTGAATTCTGTGACTACTGAGGACACAGCCACATATTACTGTGGAAGGGACTTCGATGTCTGGGGCGCAGGGACCACGGTCACCGTCTCCTCAGACATTGTGATGACTCAGTCTCAAAAATTCATGTCCACATCAGTAGGAGACAGGGTCAGCGTCACCTGCAAGGCCAGTCAGAATGTGGGTACTAATGTAGCCTGGTATCAACAGAAACCAGGGCAATCTCCTAAAGCACTGATTTACTCGGCATCCTACAGGTACAGTGGAGTCCCTGATCGCTTCACAGGCAGTGGATCTGGGACAGATTTCACTCTCACCATCAGCAATGTGCAGTCTGAAGACTTGGCAGAGTATTTCTGTCAGCAATATAACAGCTATCCTCTCACGTTCGGCTCGGGGACTAAGCTAGAAATAAAA",
        "GAGGTGCAGCTTCAGGAGTCAGGACCTAGCCTCGTGAAACCTTCTCAGACTCTGTCCCTCACCTGTTCTGTCACTGGCGACTCCATCACCAGTGGTTACTGGAACTGGATCCGGAAATTCCCAGGGAATAAACTTGAGTACATGGGGTACATAAGCTACAGTGGTAACACTTACTACAATCCATCTCTCAAAAGTCGAATCTCCATCACTCGAGACACATCCAAGAACCAGTACTACCTGCAGTTGAATTCTGTGACTACTGAGGACACAGCCACATATTACTGTGCAAGGGACTTCGATGTCTGGGGCGCAGGGACCACGGTCACCGTCTCCTCAGACATTGTGATGACTCAGTCTCAAAAATTCATGTCCACATCAGTAGGAGACAGGGTCAGCGTCACCTGCAAGGCCAGTCAGAATGTGGGTACTAATGTAGCCTGGTATCAACAGAAACCAGGACAATCTCCTAGATCACTGATTTACTCGGCATCCTACAGGTACAGTGGAGTCCCTGATCGCTTCACAGGCAGTGGATCTGGGACAGATTTCACTCTCACCATCAGCAATGTGCAGTCTGAAGACTTGGCCGAGTATTTCTGTCATCAATATAGCAGCTATCCTCTCACGTTCGGCTCGGGGACTAAGCTAGAAATAAAA",
    ]

    return seqs


@pytest.fixture
def mk_rs5nf_mutability():
    return replay.mutability()


@pytest.fixture
def replay_subst():
    return replay.substitution()

@pytest.fixture
def naive_seq():
    return replay.NAIVE_SEQUENCE

@pytest.fixture
def naive_contexts():
    return ('NNGAG', 'NGAGG', 'GAGGT', 'AGGTG', 'GGTGC', 'GTGCA', 'TGCAG', 'GCAGC', 'CAGCT', 'AGCTT', 'GCTTC', 'CTTCA', 'TTCAG', 'TCAGG', 'CAGGA', 'AGGAG', 'GGAGT', 'GAGTC', 'AGTCA', 'GTCAG', 'TCAGG', 'CAGGA', 'AGGAC', 'GGACC', 'GACCT', 'ACCTA', 'CCTAG', 'CTAGC', 'TAGCC', 'AGCCT', 'GCCTC', 'CCTCG', 'CTCGT', 'TCGTG', 'CGTGA', 'GTGAA', 'TGAAA', 'GAAAC', 'AAACC', 'AACCT', 'ACCTT', 'CCTTC', 'CTTCT', 'TTCTC', 'TCTCA', 'CTCAG', 'TCAGA', 'CAGAC', 'AGACT', 'GACTC', 'ACTCT', 'CTCTG', 'TCTGT', 'CTGTC', 'TGTCC', 'GTCCC', 'TCCCT', 'CCCTC', 'CCTCA', 'CTCAC', 'TCACC', 'CACCT', 'ACCTG', 'CCTGT', 'CTGTT', 'TGTTC', 'GTTCT', 'TTCTG', 'TCTGT', 'CTGTC', 'TGTCA', 'GTCAC', 'TCACT', 'CACTG', 'ACTGG', 'CTGGC', 'TGGCG', 'GGCGA', 'GCGAC', 'CGACT', 'GACTC', 'ACTCC', 'CTCCA', 'TCCAT', 'CCATC', 'CATCA', 'ATCAC', 'TCACC', 'CACCA', 'ACCAG', 'CCAGT', 'CAGTG', 'AGTGG', 'GTGGT', 'TGGTT', 'GGTTA', 'GTTAC', 'TTACT', 'TACTG', 'ACTGG', 'CTGGA', 'TGGAA', 'GGAAC', 'GAACT', 'AACTG', 'ACTGG', 'CTGGA', 'TGGAT', 'GGATC', 'GATCC', 'ATCCG', 'TCCGG', 'CCGGA', 'CGGAA', 'GGAAA', 'GAAAT', 'AAATT', 'AATTC', 'ATTCC', 'TTCCC', 'TCCCA', 'CCCAG', 'CCAGG', 'CAGGG', 'AGGGA', 'GGGAA', 'GGAAT', 'GAATA', 'AATAA', 'ATAAA', 'TAAAC', 'AAACT', 'AACTT', 'ACTTG', 'CTTGA', 'TTGAG', 'TGAGT', 'GAGTA', 'AGTAC', 'GTACA', 'TACAT', 'ACATG', 'CATGG', 'ATGGG', 'TGGGG', 'GGGGT', 'GGGTA', 'GGTAC', 'GTACA', 'TACAT', 'ACATA', 'CATAA', 'ATAAG', 'TAAGC', 'AAGCT', 'AGCTA', 'GCTAC', 'CTACA', 'TACAG', 'ACAGT', 'CAGTG', 'AGTGG', 'GTGGT', 'TGGTA', 'GGTAG', 'GTAGC', 'TAGCA', 'AGCAC', 'GCACT', 'CACTT', 'ACTTA', 'CTTAC', 'TTACT', 'TACTA', 'ACTAC', 'CTACA', 'TACAA', 'ACAAT', 'CAATC', 'AATCC', 'ATCCA', 'TCCAT', 'CCATC', 'CATCT', 'ATCTC', 'TCTCT', 'CTCTC', 'TCTCA', 'CTCAA', 'TCAAA', 'CAAAA', 'AAAAG', 'AAAGT', 'AAGTC', 'AGTCG', 'GTCGA', 'TCGAA', 'CGAAT', 'GAATC', 'AATCT', 'ATCTC', 'TCTCC', 'CTCCA', 'TCCAT', 'CCATC', 'CATCA', 'ATCAC', 'TCACT', 'CACTC', 'ACTCG', 'CTCGA', 'TCGAG', 'CGAGA', 'GAGAC', 'AGACA', 'GACAC', 'ACACA', 'CACAT', 'ACATC', 'CATCC', 'ATCCA', 'TCCAA', 'CCAAG', 'CAAGA', 'AAGAA', 'AGAAC', 'GAACC', 'AACCA', 'ACCAG', 'CCAGT', 'CAGTA', 'AGTAC', 'GTACT', 'TACTA', 'ACTAC', 'CTACC', 'TACCT', 'ACCTG', 'CCTGC', 'CTGCA', 'TGCAG', 'GCAGT', 'CAGTT', 'AGTTG', 'GTTGA', 'TTGAA', 'TGAAT', 'GAATT', 'AATTC', 'ATTCT', 'TTCTG', 'TCTGT', 'CTGTG', 'TGTGA', 'GTGAC', 'TGACT', 'GACTA', 'ACTAC', 'CTACT', 'TACTG', 'ACTGA', 'CTGAG', 'TGAGG', 'GAGGA', 'AGGAC', 'GGACA', 'GACAC', 'ACACA', 'CACAG', 'ACAGC', 'CAGCC', 'AGCCA', 'GCCAC', 'CCACA', 'CACAT', 'ACATA', 'CATAT', 'ATATT', 'TATTA', 'ATTAC', 'TTACT', 'TACTG', 'ACTGT', 'CTGTG', 'TGTGC', 'GTGCA', 'TGCAA', 'GCAAG', 'CAAGG', 'AAGGG', 'AGGGA', 'GGGAC', 'GGACT', 'GACTT', 'ACTTC', 'CTTCG', 'TTCGA', 'TCGAT', 'CGATG', 'GATGT', 'ATGTC', 'TGTCT', 'GTCTG', 'TCTGG', 'CTGGG', 'TGGGG', 'GGGGC', 'GGGCG', 'GGCGC', 'GCGCA', 'CGCAG', 'GCAGG', 'CAGGG', 'AGGGA', 'GGGAC', 'GGACC', 'GACCA', 'ACCAC', 'CCACG', 'CACGG', 'ACGGT', 'CGGTC', 'GGTCA', 'GTCAC', 'TCACC', 'CACCG', 'ACCGT', 'CCGTC', 'CGTCT', 'GTCTC', 'TCTCC', 'CTCCT', 'TCCTC', 'CCTCA', 'CTCAN', 'TCANN', 'NNGAC', 'NGACA', 'GACAT', 'ACATT', 'CATTG', 'ATTGT', 'TTGTG', 'TGTGA', 'GTGAT', 'TGATG', 'GATGA', 'ATGAC', 'TGACT', 'GACTC', 'ACTCA', 'CTCAG', 'TCAGT', 'CAGTC', 'AGTCT', 'GTCTC', 'TCTCA', 'CTCAA', 'TCAAA', 'CAAAA', 'AAAAA', 'AAAAT', 'AAATT', 'AATTC', 'ATTCA', 'TTCAT', 'TCATG', 'CATGT', 'ATGTC', 'TGTCC', 'GTCCA', 'TCCAC', 'CCACA', 'CACAT', 'ACATC', 'CATCA', 'ATCAG', 'TCAGT', 'CAGTA', 'AGTAG', 'GTAGG', 'TAGGA', 'AGGAG', 'GGAGA', 'GAGAC', 'AGACA', 'GACAG', 'ACAGG', 'CAGGG', 'AGGGT', 'GGGTC', 'GGTCA', 'GTCAG', 'TCAGC', 'CAGCG', 'AGCGT', 'GCGTC', 'CGTCA', 'GTCAC', 'TCACC', 'CACCT', 'ACCTG', 'CCTGC', 'CTGCA', 'TGCAA', 'GCAAG', 'CAAGG', 'AAGGC', 'AGGCC', 'GGCCA', 'GCCAG', 'CCAGT', 'CAGTC', 'AGTCA', 'GTCAG', 'TCAGA', 'CAGAA', 'AGAAT', 'GAATG', 'AATGT', 'ATGTG', 'TGTGG', 'GTGGG', 'TGGGT', 'GGGTA', 'GGTAC', 'GTACT', 'TACTA', 'ACTAA', 'CTAAT', 'TAATG', 'AATGT', 'ATGTA', 'TGTAG', 'GTAGC', 'TAGCC', 'AGCCT', 'GCCTG', 'CCTGG', 'CTGGT', 'TGGTA', 'GGTAT', 'GTATC', 'TATCA', 'ATCAA', 'TCAAC', 'CAACA', 'AACAG', 'ACAGA', 'CAGAA', 'AGAAA', 'GAAAC', 'AAACC', 'AACCA', 'ACCAG', 'CCAGG', 'CAGGG', 'AGGGC', 'GGGCA', 'GGCAA', 'GCAAT', 'CAATC', 'AATCT', 'ATCTC', 'TCTCC', 'CTCCT', 'TCCTA', 'CCTAA', 'CTAAA', 'TAAAG', 'AAAGC', 'AAGCA', 'AGCAC', 'GCACT', 'CACTG', 'ACTGA', 'CTGAT', 'TGATT', 'GATTT', 'ATTTA', 'TTTAC', 'TTACT', 'TACTC', 'ACTCG', 'CTCGG', 'TCGGC', 'CGGCA', 'GGCAT', 'GCATC', 'CATCC', 'ATCCT', 'TCCTA', 'CCTAC', 'CTACA', 'TACAG', 'ACAGG', 'CAGGT', 'AGGTA', 'GGTAC', 'GTACA', 'TACAG', 'ACAGT', 'CAGTG', 'AGTGG', 'GTGGA', 'TGGAG', 'GGAGT', 'GAGTC', 'AGTCC', 'GTCCC', 'TCCCT', 'CCCTG', 'CCTGA', 'CTGAT', 'TGATC', 'GATCG', 'ATCGC', 'TCGCT', 'CGCTT', 'GCTTC', 'CTTCA', 'TTCAC', 'TCACA', 'CACAG', 'ACAGG', 'CAGGC', 'AGGCA', 'GGCAG', 'GCAGT', 'CAGTG', 'AGTGG', 'GTGGA', 'TGGAT', 'GGATC', 'GATCT', 'ATCTG', 'TCTGG', 'CTGGG', 'TGGGA', 'GGGAC', 'GGACA', 'GACAG', 'ACAGA', 'CAGAT', 'AGATT', 'GATTT', 'ATTTC', 'TTTCA', 'TTCAC', 'TCACT', 'CACTC', 'ACTCT', 'CTCTC', 'TCTCA', 'CTCAC', 'TCACC', 'CACCA', 'ACCAT', 'CCATC', 'CATCA', 'ATCAG', 'TCAGC', 'CAGCA', 'AGCAA', 'GCAAT', 'CAATG', 'AATGT', 'ATGTG', 'TGTGC', 'GTGCA', 'TGCAG', 'GCAGT', 'CAGTC', 'AGTCT', 'GTCTG', 'TCTGA', 'CTGAA', 'TGAAG', 'GAAGA', 'AAGAC', 'AGACT', 'GACTT', 'ACTTG', 'CTTGG', 'TTGGC', 'TGGCA', 'GGCAG', 'GCAGA', 'CAGAG', 'AGAGT', 'GAGTA', 'AGTAT', 'GTATT', 'TATTT', 'ATTTC', 'TTTCT', 'TTCTG', 'TCTGT', 'CTGTC', 'TGTCA', 'GTCAG', 'TCAGC', 'CAGCA', 'AGCAA', 'GCAAT', 'CAATA', 'AATAT', 'ATATA', 'TATAA', 'ATAAC', 'TAACA', 'AACAG', 'ACAGC', 'CAGCT', 'AGCTA', 'GCTAT', 'CTATC', 'TATCC', 'ATCCT', 'TCCTC', 'CCTCT', 'CTCTC', 'TCTCA', 'CTCAC', 'TCACG', 'CACGT', 'ACGTT', 'CGTTC', 'GTTCG', 'TTCGG', 'TCGGC', 'CGGCT', 'GGCTC', 'GCTCG', 'CTCGG', 'TCGGG', 'CGGGG', 'GGGGA', 'GGGAC', 'GGACT', 'GACTA', 'ACTAA', 'CTAAG', 'TAAGC', 'AAGCT', 'AGCTA', 'GCTAG', 'CTAGA', 'TAGAA', 'AGAAA', 'GAAAT', 'AAATA', 'AATAA', 'ATAAA', 'TAAAA', 'AAAAN', 'AAANN')

@pytest.fixture
def chain_2_start_idx():
    return replay.CHAIN_2_START_IDX


@pytest.fixture
def seq_list_big():
    seqs = [
        str(seq_record.seq)
        for seq_record in SeqIO.parse(
            "notebooks/gcreplay_samples/gctree_PR1.2-5-LP-78-GC.fasta", "fasta"
        )
        if seq_record.id != "naive"
    ]
    return seqs

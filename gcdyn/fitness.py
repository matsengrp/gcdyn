r"""Uses phenotype to determine fitness of B cells in the germinal center light zone"""
from __future__ import annotations
from typing import Callable
from math import exp
import pandas as pd


class Fitness:
    r"""Class to determine fitness from phenotype for a collection of sequences

    Args:
        tfh_function: method to map from KD to T cell help, taking in a list of :math:`K_D` values and producing a list of absolute T cell help quantities
        concentration_antigen: molar concentration of antigen to determine antigen bound
    """

    def __init__(
        self,
        tfh_function: Callable[[list[float], ...], list[float]],
        concentration_antigen: float = 10 ** (-9),
    ):
        self.tfh_function = tfh_function
        self.concentration_antigen = concentration_antigen

    def __frac_antigen_bound(self, sequence_KDs: list[float]) -> list[float]:
        r"""Determine the fraction of antigen bound from a list of KD values using the Hill equation.

        Args:
            sequence_KDs: list of KDs that will each be used to determine the fraction of antigen bound.

        Returns:
            thetas: list of values representing the fraction of receptors with antigen bound
        """
        thetas = []
        for seq_KD in sequence_KDs:
            # Hill equation with n = 1:
            theta = self.concentration_antigen / (seq_KD + self.concentration_antigen)
            thetas.append(theta)
        return thetas

    def linear_fitness(
        self, kd_values: list[float], y_intercept: float = 0, slope: float = 1
    ) -> list[float]:
        r"""Combines methods to get the antigen bound and T cell help
        from the KD using a linear model.

        Args:
            kd_values: list with KD value for each sequence
            y_intercept: amount of T-cell help with no antigen bound
            slope: coefficient of relationship between antigen bound and T cell help

        Returns:
            t_cell_help_values: list with non-normalized T cell help value for each sequence
        """
        fracs_antigen_bound = self.__frac_antigen_bound(kd_values)
        t_cell_help_values = list(
            antigen_bound * slope + y_intercept for antigen_bound in fracs_antigen_bound
        )
        return t_cell_help_values

    def uniform_fitness(self, sequence_values: list[float]) -> list[float]:
        r"""Sets normalized amount of T cell help to equal values

        Args:
            sequence_values: list of length equivalent to number of sequences

        Returns:
            normalized_t_cell_help: T cell help for each sequence assuming uniform distribution
        """
        return [1 / len(sequence_values)] * len(sequence_values)

    def sigmoidal_fitness(
        self,
        kd_values: list[float],
        maximum_Tfh: float = 4,
        curve_steepness: float = 10,
        midpoint_antigen_bound: float = 0.5,
    ) -> list[float]:
        r"""Combines methods to get the antigen bound and T cell help
        from the KD using a sigmoidal model.

        Args:
            kd_values: list with KD value for each sequence
            maximum_Tfh: maximum possible T cell help generated by model
            curve_steepness: logistic growth rate of T cell help
            midpoint_antigen_bound: value of input antigen bound to set as midpoint

        Returns:
            t_cell_help_values: list with non-normalized T cell help value for each sequence
        """
        fracs_antigen_bound = self.__frac_antigen_bound(kd_values)
        t_cell_help_values = list(
            maximum_Tfh
            / (1 + exp(-1 * curve_steepness * (antigen_bound - midpoint_antigen_bound)))
            for antigen_bound in fracs_antigen_bound
        )
        return t_cell_help_values

    def normalized_fitness_df(
        self,
        seq_list: list[str],
        calculate_KD: Callable[[list[str]], list[float]],
    ) -> pd.DataFrame:
        r"""Produces a dataframe including the fitness of a series of sequences given KD values.

        Args:
            seq_list: list of DNA sequences
            calculate_KD: method that produces a KD value for each sequence in the list

        Returns:
            DataFrame with columns ``frac_antigen_bound``, ``KD``, ``t_cell_help``, and ``normalized_t_cell_help``
            with ``t_cell_help values`` based on ``tfh_function`` set on initialization
        """
        kd_values = calculate_KD(seq_list)
        seq_df = pd.DataFrame({"seq": seq_list, "KD": kd_values})
        seq_df["t_cell_help"] = self.tfh_function(self, kd_values)
        sum_fitness = seq_df["t_cell_help"].sum()
        seq_df["normalized_t_cell_help"] = (seq_df["t_cell_help"]) / sum_fitness
        return seq_df

    def cell_divisions_from_tfh_linear(
        self, norm_t_cell_help: list[float], slope: float = 1, y_intercept: float = 0
    ) -> list[float]:
        """Map T cell help linearly to the number of cell divisions using
        slope.

        Args:
            norm_t_cell_help: list of normalized amounts of T cell help to correspond to each sequence of interest
            slope: coefficient of relationship between normalized T cell help and cell divisions
            y_intercept: cell divisions per cycle with no T cell help

        Returns:
            cell_divisions: list of cell division counts for each sequence
        """
        cell_divisions = list(
            t_cell_help * slope + y_intercept for t_cell_help in norm_t_cell_help
        )
        return cell_divisions

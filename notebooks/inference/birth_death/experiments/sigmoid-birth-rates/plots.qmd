---
format:
    pdf:
        fig-dpi: 300
echo: false
highlight-style: github
monofont: Fira Code
warning: false
---

```{r}
#| include: false

library(tidyverse)
library(coda)
library(glue)
library(patchwork)
library(kableExtra)

samples <- read_csv("samples.csv") |>
    rename(Iteration = `...1`)

if ("mutation_rate" %in% colnames(samples)) {
    samples <- pivot_longer(samples, c("xscale", "xshift", "yscale", "yshift", "death_rate", "mutation_rate"),
        names_to = "Parameter",
        values_to = "Sample"
    )
} else {
    samples <- pivot_longer(samples, c("xscale", "xshift", "yscale", "yshift", "death_rate"),
        names_to = "Parameter",
        values_to = "Sample"
    )
}

truth <- tibble(
    Parameter = c("xscale", "xshift", "yscale", "yshift", "death_rate", "mutation_rate"),
    Truth = c(1, 5, 1.5, 1, 1.3, 2)
)

priors <- list(
    xscale = \(x) dgamma(x, 2, scale=1),
    xshift = \(x) dnorm(x, 5, 1),
    yscale = \(x) dgamma(x, 2, scale=1),
    yshift = \(x) dnorm(x, 1, 1),
    death_rate = \(x) dlnorm(x, 0, 0.3),
    mutation_rate = \(x) dlnorm(x, 1.5, 1)
) 
```

## Posterior median sampling distributions

```{r}
#| fig-height: 6

plot_hist <- function(parameter_name) {
    samples |>
        filter(Parameter == parameter_name) |>
        group_by(run, Parameter) |>
        summarise(Sample = median(Sample)) |>
        left_join(truth, by = "Parameter") |>
        ggplot() +
        geom_histogram(
            aes(x = Sample, y = after_stat(density), fill = "Sampling distribution")
        ) +
        geom_vline(aes(xintercept = Truth),
            color = "red",
            linewidth = 1
        ) +
        stat_function(
            aes(fill = "Prior"),
            geom = "area",
            fun = priors[[parameter_name]],
            alpha = 0.8
        ) +
        scale_fill_manual(
            name = "",
            values = c("Sampling distribution" = "steelblue", "Prior" = "grey")
        ) +
        facet_wrap(vars(Parameter)) +
        xlab("Estimate") +
        expand_limits(x = c(0, 4)) +
        theme_minimal() +
        theme(legend.position = "none")
}

(plot_hist("xscale") + plot_hist("xshift")) / (plot_hist("yscale") + plot_hist("yshift")) / plot_hist("death_rate")
```

\pagebreak

```{r}
sigmoid <- function(x, estimate) {
    theta <- estimate |>
        pivot_wider(
            names_from = Parameter,
            values_from = Estimate
        ) |>
        with(c(xscale, xshift, yscale, yshift))

    theta[3] / (1 + exp(-theta[1] * (x - theta[2]))) + theta[4]
}
```

```{r}
#| fig-height: 3.5

sampling_dist_plot <- ggplot() +
    xlim(0, 10) +
    ylim(0, 4)

sampled_sigmoids <- samples |>
    group_by(run, Parameter) |>
    summarise(Estimate = median(Sample)) |>
    group_by(run) |>
    group_map(\(estimate, ...) \(x) sigmoid(x, estimate))

for (sig in sampled_sigmoids) {
    sampling_dist_plot <- sampling_dist_plot + stat_function(fun = sig, alpha = 0.03, linewidth = 1)
}

sampling_dist_plot <- sampling_dist_plot +
    stat_function(
        aes(color = "Truth"),
        fun = \(x) sigmoid(x, truth |> rename(Estimate = Truth)),
        linewidth = 1.5
    ) +
    scale_color_manual(
        name = "",
        values = c("Truth" = "red")
    ) +
    labs(
        title = "Sampling distribution",
        x = "x",
        y = expression(paste(lambda, "(x)"))
    ) +
    theme_classic() +
    theme(legend.position = "bottom")

sampling_dist_plot
```

\pagebreak

## Traceplots (one run)

```{r}
#| fig-height: 6

left_join(samples, truth, by = "Parameter") |>
    filter(Iteration > 100 & run == 1) |>
    ggplot(aes(Iteration, Sample)) +
    geom_line() +
    geom_hline(aes(yintercept = Truth, color = "Truth")) +
    facet_wrap(vars(Parameter), ncol = 1, scales = "free")
```

\pagebreak
